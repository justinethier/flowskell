(define *curx* 0)
(define *cury* 0)
(define *curi* 0)
(define *width* 10)
(define *height* 12)
(define *last-emerge* (secs))
(define *my-field*
  (list
    (list 0 0 0 0 0 0 0 0 0 0)
    (list 0 0 0 0 0 0 0 0 0 0)
    (list 0 0 0 0 0 0 0 0 0 0)
    (list 0 0 0 0 0 0 0 0 0 0)
    (list 0 0 0 0 0 0 0 0 0 0)
    (list 0 0 0 0 0 0 0 0 0 0)
    (list 0 0 0 0 0 0 0 0 0 0)
    (list 0 0 0 0 0 0 0 0 0 0)
    (list 0 0 0 0 0 2 0 0 0 0)
    (list 0 1 0 0 0 2 0 0 4 4)
    (list 0 1 4 4 0 2 5 5 4 4)
    (list 1 1 4 4 0 2 0 5 5 0)))
(define *items*
  (list
      (list
        (list 6 6)
        (list 6 0)
        (list 6 0))
      (list
        (list 4 4)
        (list 4 4))
      (list
        (list 0 5 5)
        (list 5 5 0))
      (list
        (list 2)
        (list 2)
        (list 2)
        (list 2))))
(define (draw-box b)
  (if (> b 0)
      (list (push)
      (scale 0.5)
      (color (hsv (* b 36)))
      (draw-cube)
      (pop))))
(define (draw-line l)
  (push)
  (map (lambda (r) 
    (translate (vector 1 0 0))
    (draw-box r)) (reverse l))
  (pop))
(define (draw-field f)
  (push)
  (map (lambda (l)
    (translate (vector 0 1 0))
    (draw-line l)) f)
  (pop))
(define (draw-falling)
  (let ((x *curx*)
        (y *cury*))
      (push)
      (translate (vector x y 0))
      (draw-field (list-ref *items* *curi*))
      (pop)))
(define (every-frame)
  (set! *last-emerge* (if (<= *cury* 0) (secs) *last-emerge*))
  (set! *curx* (if (<= *cury* 0) (random (- *width* 3)) *curx*))
  (set! *curi* (if (<= *cury* 0) (random (- (length *items*) 1)) *curi*))
  (set! *cury* (- *height* (* 4 (- (secs) *last-emerge*))))
  (push)
    (color (vmul 0.2 white))
    (translate (vector 0 0 -0.1))
    (draw-plane)
  (pop)
  (scale 0.15)
  (translate (vector (/ *width* -2) (/ *height* -2) 0))
  (draw-field *my-field*)
  (draw-falling))
