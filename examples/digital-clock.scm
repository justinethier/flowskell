; Return a list containing numbers from 0 to n
(define (range n)
    (if (> n 0)
        (append (range (- n 1)) (list n))
        '(0)))

; Load textures from 0 to 9
(define numbers
    (map (lambda (n)
        (load-texture (string-append "examples/img/number-" (number->string n) ".png"))
        )
    (range 9)))

(define (draw-digit num fac)
    (let ((f (/ num fac)))
      (let ((n (% (floor f) 10))
            (r (- f (floor f))))
          (push)
          (texture 0)
          (rotate (* (max (* (- r (- 1 (/ 1 (* 2 fac)))) (* fac 2)) 0) 90) x-axis)
          (push)
              (translate (vector 0 0 1))
              (texture (list-ref numbers n))
              (draw-plane)
          (pop)
          (push)
              (texture (list-ref numbers (% (+ n 1) 10)))
              (translate (vector 0 1 0))
              (rotate -90 x-axis)
              (draw-plane)
          (pop)
          (pop)
      )))
(define (draw-number c)
    (translate (vector -4 0 0))
    (draw-digit c 10000)
    (translate (vector 2 0 0))
    (draw-digit c 1000)
    (translate (vector 2 0 0))
    (draw-digit c 100)
    (translate (vector 2 0 0))
    (draw-digit c 10)
    (translate (vector 2 0 0))
    (draw-digit c 1)
    )

; Remember secs
(define start-secs (secs))

(define (every-frame)
    (scale 0.2)
    (rotate (* 10 (sin (secs))) y-axis)
    (draw-number (- (secs) start-secs)))
